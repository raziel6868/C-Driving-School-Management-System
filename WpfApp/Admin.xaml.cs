using BusinessObjects;
using Repositories;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;

namespace WpfApp
{
    
    public partial class Admin : Window
    {
        private readonly ICourseInformationRepository _CourseInformationRepository = new CourseInfomationRepository();
        private readonly IStudentRepository _StudentRepository = new StudentRepository();
        private readonly ICourseTypeRepository _CourseTypeRepository = new CourseTypeRepository();
        private readonly IEnrollmentDetailRepository _EnrollmentDetailRepository = new EnrollmentDetailRepository();
        private readonly IEnrollmentReservationRepository _EnrollmentReservationRepository = new EnrollmentReservationRepository();

        public Admin()
        {
            InitializeComponent();
            BindCourses();
            BindStudents();
            BindCourseTypes();
            BindEnrollmentDetails();
        }

        private void BindCourses()
        {
            List<CourseInformation> CourseInformations = _CourseInformationRepository.GetCourseInformations();
            foreach (CourseInformation CourseInformation in CourseInformations)
            {
                CourseInformation.CourseType = _CourseTypeRepository.GetCourseTypeById(CourseInformation.CourseTypeID);
            }
            dtCourse.ItemsSource = CourseInformations;
        }

        private void BindStudents()
        {
            List<Student> Students = _StudentRepository.GetStudents();
            dtStudents.ItemsSource = Students;
        }

        private void BindCourseTypes()
        {
            List<CourseType> CourseTypes = _CourseTypeRepository.GetCourseTypes();
            dtCourseType.ItemsSource = CourseTypes;
        }

        private void BindEnrollmentDetails ()
        {
            List<EnrollmentDetail> EnrollmentDetails = _EnrollmentDetailRepository.GetAllEnrollmentDetails();
            dtEnrollmentDetails.ItemsSource = EnrollmentDetails;
        }

        private void dtCourse_AutoGeneratedColumns(object sender, EventArgs e)
        {
            DataGridTemplateColumn actionsColumn = new DataGridTemplateColumn();
            actionsColumn.Header = "Actions";
            actionsColumn.Width = new DataGridLength(1, DataGridLengthUnitType.Auto);

            FrameworkElementFactory factory = new FrameworkElementFactory(typeof(StackPanel));
            factory.SetValue(StackPanel.OrientationProperty, Orientation.Horizontal);
            factory.SetValue(StackPanel.MarginProperty, new Thickness(5, 0, 5, 0)); // Adjust margins for spacing

            FrameworkElementFactory btnUpdate = new FrameworkElementFactory(typeof(Button));
            btnUpdate.SetValue(Button.ContentProperty, "Update");
            btnUpdate.SetValue(Button.CommandParameterProperty, new Binding("CourseID"));
            btnUpdate.AddHandler(Button.ClickEvent, new RoutedEventHandler(Update_Click));
            factory.AppendChild(btnUpdate);

            FrameworkElementFactory btnDelete = new FrameworkElementFactory(typeof(Button));
            btnDelete.SetValue(Button.ContentProperty, "Delete");
            btnDelete.SetValue(Button.CommandParameterProperty, new Binding("CourseID"));
            btnDelete.AddHandler(Button.ClickEvent, new RoutedEventHandler(Delete_Click));
            factory.AppendChild(btnDelete);

            DataTemplate cellTemplate = new DataTemplate();
            cellTemplate.VisualTree = factory;
            actionsColumn.CellTemplate = cellTemplate;

            dtCourse.Columns.Add(actionsColumn);
            dtCourse.Items.Refresh();

        }


        private void Update_Click(object sender, RoutedEventArgs e)
        {
            Button button = sender as Button;
            int CourseID = (int)button?.CommandParameter;

            UpdateCourseWindow updateWindow = new UpdateCourseWindow(CourseID);
            updateWindow.Owner = Window.GetWindow(this);
            updateWindow.WindowStartupLocation = WindowStartupLocation.CenterOwner;

            updateWindow.Closed += (s, args) =>
            {
                BindCourses();
                dtCourse.Items.Refresh();

            };

            updateWindow.ShowDialog();
        }




        private void Delete_Click(object sender, RoutedEventArgs e)
        {
            Button button = sender as Button;
            int CourseID = (int)button?.CommandParameter;

            MessageBoxResult result = MessageBox.Show($"Do you want to delete Course ID: {CourseID}?",
                                                      "Confirm Deleting",
                                                      MessageBoxButton.YesNo,
                                                      MessageBoxImage.Question);

            if (result == MessageBoxResult.Yes)
            {
                _CourseInformationRepository.DeleteCourseInformation(_CourseInformationRepository.GetCourseInformationById(CourseID));


                MessageBox.Show("Delete complete");
                BindCourses();
                dtCourse.Items.Refresh();



            }
        }

        private void Add_Course_Click(object sender, RoutedEventArgs e)
        {
            AddCourseWindow addCourseWindow = new AddCourseWindow();
            addCourseWindow.Owner = Window.GetWindow(this); // Set the owner window
            addCourseWindow.WindowStartupLocation = WindowStartupLocation.CenterOwner; // Center the window
            
            addCourseWindow.Closed += (s, args) =>
            {
                BindCourses();
                dtCourse.Items.Refresh();

            };
            addCourseWindow.ShowDialog();
        }

        private void dtStudent_AutoGeneratedColumns(object sender, EventArgs e)
        {
            DataGridTemplateColumn actionsColumn = new DataGridTemplateColumn();
            actionsColumn.Header = "Actions";
            actionsColumn.Width = new DataGridLength(1, DataGridLengthUnitType.Auto);

            FrameworkElementFactory factory = new FrameworkElementFactory(typeof(StackPanel));
            factory.SetValue(StackPanel.OrientationProperty, Orientation.Horizontal);
            factory.SetValue(StackPanel.MarginProperty, new Thickness(5, 0, 5, 0)); // Adjust margins for spacing

            FrameworkElementFactory btnUpdate = new FrameworkElementFactory(typeof(Button));
            btnUpdate.SetValue(Button.ContentProperty, "Update");
            btnUpdate.SetValue(Button.CommandParameterProperty, new Binding("StudentID"));
            btnUpdate.AddHandler(Button.ClickEvent, new RoutedEventHandler(UpdateStudent_Click));
            factory.AppendChild(btnUpdate);

            FrameworkElementFactory btnDelete = new FrameworkElementFactory(typeof(Button));
            btnDelete.SetValue(Button.ContentProperty, "Delete");
            btnDelete.SetValue(Button.CommandParameterProperty, new Binding("StudentID"));
            btnDelete.AddHandler(Button.ClickEvent, new RoutedEventHandler(DeleteStudent_Click));
            factory.AppendChild(btnDelete);

            DataTemplate cellTemplate = new DataTemplate();
            cellTemplate.VisualTree = factory;
            actionsColumn.CellTemplate = cellTemplate;

            dtStudents.Columns.Add(actionsColumn);
            dtStudents.Items.Refresh();

        }

        private void UpdateStudent_Click(object sender, RoutedEventArgs e)
        {
            Button button = sender as Button;
            int StudentId = (int)button?.CommandParameter;

            UpdateStudentWindow updateWindow = new UpdateStudentWindow(StudentId);
            updateWindow.Owner = Window.GetWindow(this);
            updateWindow.WindowStartupLocation = WindowStartupLocation.CenterOwner;

            updateWindow.Closed += (s, args) =>
            {
                BindStudents();
                dtStudents.Items.Refresh();

            };

            updateWindow.ShowDialog();
        }

        private void DeleteStudent_Click(object sender, RoutedEventArgs e)
        {
            Button button = sender as Button;
            int StudentId = (int)button?.CommandParameter;

            MessageBoxResult result = MessageBox.Show($"Do you want to delete Student ID: {StudentId}?",
                                                      "Confirm Deleting",
                                                      MessageBoxButton.YesNo,
                                                      MessageBoxImage.Question);

            if (result == MessageBoxResult.Yes)
            {
                _StudentRepository.DeleteStudent(_StudentRepository.GetStudentById(StudentId));


                MessageBox.Show("Delete complete");
                BindStudents();
                dtStudents.Items.Refresh();

            }
        }

            private void Add_Student_Click(object sender, RoutedEventArgs e)
        {
            AddNewStudent addNewStudent = new AddNewStudent();
            addNewStudent.Owner = Window.GetWindow(this); // Set the owner window
            addNewStudent.WindowStartupLocation = WindowStartupLocation.CenterOwner; // Center the window

            addNewStudent.Closed += (s, args) =>
            {
                BindStudents();
                dtStudents.Items.Refresh();

            };
            addNewStudent.ShowDialog();
        }


        private void ButtonLogOut_Click(object sender, RoutedEventArgs e)
        {
            this.Close();
            MainWindow mainWindow = new MainWindow();
            mainWindow.Show();
        }

        private void Confirm_Click(object sender, RoutedEventArgs e)
        {
            Button button = sender as Button;
            int EnrollmentReservationID = (int)button.CommandParameter;
            MessageBoxResult result = MessageBox.Show($"Do you want to confirm Enrollment ID: {EnrollmentReservationID}?",
                                                      "Confirm confirm",
                                                      MessageBoxButton.YesNo,
                                                      MessageBoxImage.Question);

            if (result == MessageBoxResult.Yes)
            {

                var EnrollmentReservation = _EnrollmentReservationRepository.GetEnrollmentReservation(EnrollmentReservationID);
                EnrollmentReservation.EnrollmentStatus = EnrollmentStatus.Confirmed;
                _EnrollmentReservationRepository.UpdateReservation(EnrollmentReservation);
                var EnrollmentDetail = _EnrollmentDetailRepository.GetEnrollmentDetail(EnrollmentReservationID);
                EnrollmentDetail.EnrollmentReservation = EnrollmentReservation;
                _EnrollmentDetailRepository.UpdateEnrollmentDetail(EnrollmentDetail);
                MessageBox.Show("Confirm complete");
                BindEnrollmentDetails();
                dtEnrollmentDetails.Items.Refresh();



            }
        }

        private void Decline_Click(object sender, RoutedEventArgs e)
        {
            Button button = sender as Button;
            int EnrollmentReservationID = (int)button.CommandParameter;
            MessageBoxResult result = MessageBox.Show($"Do you want to declined Enrollment ID: {EnrollmentReservationID}?",
                                                      "Confirm Decline",
                                                      MessageBoxButton.YesNo,
                                                      MessageBoxImage.Question);

            if (result == MessageBoxResult.Yes)
            {
                
                var EnrollmentReservation = _EnrollmentReservationRepository.GetEnrollmentReservation(EnrollmentReservationID);
                EnrollmentReservation.EnrollmentStatus = EnrollmentStatus.Cancelled;
                _EnrollmentReservationRepository.UpdateReservation(EnrollmentReservation);
                var EnrollmentDetail = _EnrollmentDetailRepository.GetEnrollmentDetail(EnrollmentReservationID);
                EnrollmentDetail.EnrollmentReservation = EnrollmentReservation;
                _EnrollmentDetailRepository.UpdateEnrollmentDetail(EnrollmentDetail);
                MessageBox.Show("Decline complete");
                BindEnrollmentDetails();
                dtEnrollmentDetails.Items.Refresh();



            }
        }
    }
}

